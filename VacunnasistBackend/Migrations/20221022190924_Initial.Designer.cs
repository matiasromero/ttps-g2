// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacunassistBackend.Data;

#nullable disable

namespace VacunnasistBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221022190924_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VacunassistBackend.Entities.AppliedVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppliedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("AppliedVaccines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedDate = new DateTime(2022, 3, 12, 10, 30, 1, 0, DateTimeKind.Unspecified),
                            UserId = 3,
                            VaccineId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppliedDate = new DateTime(2022, 5, 10, 14, 30, 25, 0, DateTimeKind.Unspecified),
                            UserId = 3,
                            VaccineId = 2
                        },
                        new
                        {
                            Id = 3,
                            UserId = 3,
                            VaccineId = 3
                        });
                });

            modelBuilder.Entity("VacunassistBackend.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("VaccinatorId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccinatorId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("VacunassistBackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HealthWorker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pregnant")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Calle Falsa 1234, La Plata",
                            BirthDate = new DateTime(2022, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DNI = "11111111",
                            Email = "admin@vacunassist.com",
                            FullName = "Administrador",
                            Gender = "other",
                            HealthWorker = false,
                            IsActive = true,
                            PasswordHash = "1000:EXU8yrR2499tJhnziaIWzpmx2gSb6+nq:99OeBoAu7bHOI+4ZyAn/SzcFbqJ7IfBK",
                            Pregnant = false,
                            Province = "",
                            Role = "administrator",
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Calle Falsa 4567, La Plata",
                            BirthDate = new DateTime(2022, 10, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            DNI = "11111111",
                            Email = "vacunador@email.com",
                            FullName = "Vacunador",
                            Gender = "other",
                            HealthWorker = false,
                            IsActive = true,
                            PasswordHash = "1000:OlM7r9GhAjLZAejnOs94Q47G52jioXaq:/84HGpAMAnrg3urnaPnR53FYoRrKRGsi",
                            Pregnant = false,
                            Province = "",
                            Role = "vacunator",
                            UserName = "Vacunador"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Calle Falsa 789, La Plata",
                            BirthDate = new DateTime(1987, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "12548987",
                            Email = "email@email.com",
                            FullName = "Paciente",
                            Gender = "other",
                            HealthWorker = false,
                            IsActive = true,
                            PasswordHash = "1000:Al/ouVWDjaVdIAoUN4hP05LKY9JEH8kg:OfzU+q4IxRrroOuOYS7Ne4048+hSGMmB",
                            Pregnant = false,
                            Province = "",
                            Role = "patient",
                            UserName = "Paciente"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Calle Falsa 111, La Plata",
                            BirthDate = new DateTime(1987, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DNI = "33170336",
                            Email = "email2@email.com",
                            FullName = "Juan Perez",
                            Gender = "male",
                            HealthWorker = false,
                            IsActive = true,
                            PasswordHash = "1000:cI0NritnDdYU429xHH6Z+89txbdckjkE:HvstMmuksdrzWGtJ9Vf+KAvgUOEWHyP1",
                            Pregnant = false,
                            Province = "",
                            Role = "patient",
                            UserName = "jperez"
                        });
                });

            modelBuilder.Entity("VacunassistBackend.Entities.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanBeRequested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanBeRequested = true,
                            IsActive = true,
                            Name = "COVID-19"
                        },
                        new
                        {
                            Id = 2,
                            CanBeRequested = false,
                            IsActive = true,
                            Name = "Fiebre amarilla"
                        },
                        new
                        {
                            Id = 3,
                            CanBeRequested = true,
                            IsActive = true,
                            Name = "Gripe"
                        });
                });

            modelBuilder.Entity("VacunassistBackend.Entities.AppliedVaccine", b =>
                {
                    b.HasOne("VacunassistBackend.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("VacunassistBackend.Entities.User", "User")
                        .WithMany("Vaccines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacunassistBackend.Entities.Vaccine", "Vaccine")
                        .WithMany("Users")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VacunassistBackend.Entities.Appointment", b =>
                {
                    b.HasOne("VacunassistBackend.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacunassistBackend.Entities.User", "Vaccinator")
                        .WithMany()
                        .HasForeignKey("VaccinatorId");

                    b.HasOne("VacunassistBackend.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Vaccinator");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VacunassistBackend.Entities.User", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("VacunassistBackend.Entities.Vaccine", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
